import React, { Component } from 'react'
import './App.css'
import {tableData} from "./faker";
import _  from "lodash";

// –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
const tableColumns = {
    visitDate: '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞',
    activityLevel: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
    activityTime: '–í—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ',
    visitCount: '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
    searchPhrase: '–§—Ä–∞–∑–∞',
    gender: '–ü–æ–ª',
    address: '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å',
    country: '–°—Ç—Ä–∞–Ω–∞'
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
class TableMain extends Component {
    state = {
        originalResults: [],
        displayResults: [],
        sortBy: null,
        sortAsc: true,
        filterBy: [],
        filterTypes: [],
        filterProps: []
    };

    componentDidMount() {
        this.setState({ originalResults: tableData, displayResults: tableData });
    }


    filterResults = (query, results, id) => {
        return results.filter(row => {
            let tableRow = row[id];

            if (typeof tableRow === 'number') {
                query=parseInt(query);
                return query===tableRow
            }

            if (typeof tableRow === 'string') {
                // –ò—â–µ—Ç —Ç–æ–ª—å–∫–æ –≤ lowercase, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ –∂—É–µ—Ç, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤—Ä–µ–º—è –±—É–¥–µ—Ç
                return tableRow.toLowerCase().includes(query)
            }
        });
    };

    onChange = e => {
        const query = e.target.value;

        this.setState(prevState => ({
            displayResults:
                query.length > 0
                    ? this.filterResults(query, prevState.originalResults, e.target.id)
                    : prevState.originalResults
        }));
    };

//   –ö–æ—Å—Ç—ã–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –Ω–µ —Å–º–æ–≥ –¥–æ–≤–µ—Å—Ç–∏ –¥–æ —É–º–∞
    sortResults = event => {
//       –î–æ–±–∞–≤–ª—è—é –≤ sortBy –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        this.state.sortBy = event.target.id;

        this.setState(prevState => {
            let { displayResults, sortAsc } = prevState;

//           –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const firstElement = displayResults[0][event.target.id];
            const nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            if (firstElement[0] in nums && !firstElement.includes(':')) {
                displayResults = _.orderBy(displayResults, (obj) => parseInt(obj[event.target.id], 10), [sortAsc ? 'asc' : 'desc']);
            }

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ
            if (firstElement[0] in nums && firstElement.includes(':')) {
                displayResults = _.orderBy(displayResults, (obj) => parseInt(obj[event.target.id].replace(':', ''), 10), [sortAsc ? 'asc' : 'desc']);
            }

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–∑–∏—Ç–∞
            if (firstElement.includes('GMT')) {
                displayResults = _.orderBy(displayResults, (obj) => Date.parse(obj[event.target.id]), [sortAsc ? 'asc' : 'desc'])
            }

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
            if (!(firstElement[0] in nums) && !firstElement.includes('GMT')) {
                displayResults = _.orderBy(displayResults, event.target.id, [sortAsc ? 'asc' : 'desc'])
            }

            return {
                displayResults,
                sortAsc: sortAsc !== true
            };
        });
    };

    render() {
        return (
            <div>
                <div className="row">
                    <table className="table table-hover" style={{ width: "100%" }}>
                        <thead className="table-head border-top table-secondary">
                        <tr>
                            {Object.entries(tableColumns).map((e) => {
                                return (
                                    <th id={e[0]} className="table-columns col-2">
                                        <div className="table-headtext">
                                            <p id={e[0]} onClick={this.sortResults} className="text-nowrap">{e[1]}</p>
                                            <p className="triangle">{this.state.sortBy===e[0]? this.state.sortAsc === true ? ' ü¢ó':' ü¢ï' : ' ü¢î'}</p>
                                        </div>
                                        <input  id={e[0]} label="Search" onChange={this.onChange} type="text" className="form-control" />
                                        <span className="vl"/>
                                    </th>
                                )
                            })}
                        </tr>
                        </thead>
                        <tbody>
                        {this.state.displayResults.map(item => (
                            <Row
                                columnKeys={item}
                            />
                        ))}
                        </tbody>
                    </table>
                </div>
            </div>
        );
    }
}

const Row = (columnKeys) => {
    return (
        <tr>
            {Object.values(columnKeys.columnKeys).map(el => {return <th className='table-light'>{el}</th>})}
        </tr>
    );
}

class App extends Component {
    render() {
        return (
            <div className="App">
                <TableMain />
            </div>
        );
    }
}

export default App
